{"mappings":"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","sources":["<anon>","src/index.ts","src/pages/home/index.ts","src/state.ts","src/components/card/index.ts"],"sourcesContent":["const $0b89d474933103bc$export$ca000e230c0caa3e = {\n    data: {\n        tasks: [\n            {\n                id: \"123\",\n                text: \"asdf\",\n                checked: false\n            }\n        ]\n    },\n    listeners: [],\n    //METODOS //\n    //INIT:\n    /*\n  FUNCION DE ESTE METODO: INICIALIZAR EL ESTADO TOMANDO LA DATA DEL LOCALSTORAGE\n  -Muestra en consola que inicia estado\n  -Guarda en la constante localData  \n  lo que devuelve El método getItem() de la interfaz Storage :\n  devuelve el valor de la clave cuyo nombre se le pasa por parámetro.\n  -Ejecuta setState()pasandole localData parseado\n  JSON.parse() retorna el objeto que se corresponde con el texto JSON entregado.\n  */ init () {\n        console.log(\"State Init\");\n        const localData = localStorage.getItem(\"save-state\");\n        this.setState(JSON.parse(localData));\n    },\n    //GETSTATE: Retorna lo que se encuentra en data\n    getState () {\n        return this.data;\n    },\n    //GETENABLEDTASKS\n    /*FUNCION DEL METODO: DEVOLVER LAS TASKS QUE NO ESTAN CON DELETED\n  -Guarda en la constante lastState lo que devuelve getState()\n  -Entra en un condional:\n  si lastState tiene tasks, sobre las mismas aplica el metodo filter\n  y devuelve un nuevo array que contiene las tasks que no contenian deleted.\n  Si no tiene tasks devuelve un array vacio\n  \n  */ getEnabledTasks () {\n        const lastState = this.getState();\n        if (lastState && lastState.tasks) return lastState.tasks.filter((t)=>!t.deleted);\n        else return [];\n    },\n    //ADDTASK\n    /**\n   /FUNCION DEL METODO: AGREGAR TAREAS. \n   -Recibe por parametro un Id y un text\n    \n    -Pushea a las tasks del lastStage id, text y el checked en false\n   \n   */ addTask (id, text) {\n        const lastState = this.getState();\n        lastState.tasks.push({\n            id: id,\n            text: text,\n            checked: false\n        });\n        this.setState(lastState);\n    },\n    //CHANGEITEMSTATE\n    /*\n  /FUNCION DEL METODO: CAMBIA EL ESTADO DE LOS ITEMS EN EL STATE\n  -Recibe por parametro un id, un booleano como newValue y una property que puede ser \"check\" o \"delete\"\n  -Guarda en la constante lastState lo que devuelve getState()\n  -Usa un find para recorrer las tasks, cuando se encuentra con una que coincide con el id que se le pasa, \n  la guarda en itemTochange (item a cambiar)\n  -Entra en un condicional: \n  Si incluye la propiedad check se le asigna como valor el newvalue boleano pasado por parametro\n  -Se actualiza estado con setState()pasandole como parametro el lastStage actualizado\n  */ changeItemState (id, newValue, property) {\n        const lastState = this.getState();\n        const itemToChange = lastState.tasks.find((t)=>t.id == id);\n        if (property == \"check\") itemToChange.checked = newValue;\n        if (property == \"delete\") itemToChange.deleted = newValue;\n        this.setState(lastState);\n    },\n    //SETSTATE: Recibe nuevo estado,\n    /*\n  FUNCION DEL METODO: ACTUALIZA EL ESTADO Y LO GUARDA EN EL LOCALSTORAGE\n  -Recibe por parametro el nuevo estado\n  -Lo guarda en data\n  -Recorre y ejecuta los listeners\npara que los componentes subscritos se enteren de los cambios del estado.\n-El método setItem() de la interfaz Storage, \ncuando reciba una clave y un valor, añadirá estos al almacén, \no actualizará el valor si la clave ya existe. Pasa como parametro a este metodo\nel nuevo estado\n  //*/ setState (newState) {\n        this.data = newState;\n        for (const cb of this.listeners)cb();\n        localStorage.setItem(\"save-state\", JSON.stringify(newState));\n    },\n    //SUBSCRIBE: Recibe una funcion y la pushea a los listeners.\n    //Cuando se realize un setState()(metodo que recorre y ejecuta los listeners)\n    //los componentes subscritos se enteraran de los cambios del estado\n    subscribe (callback) {\n        this.listeners.push(callback);\n    },\n    //CLEARCACHE\n    /*\n  FUNCION DEL METODO: LIMPIAR EL LOCALSTORAGE CUANDO YA NO HAY MAS TAREAS\n  -Entra en un condicional:\n  Si el resultado de ejecutar getEnabledtask devuelve un array de length 0 (es decir esta vacio)\n  avisa por consola que las tareas estan eliminadas\n  limpia el localStorage\n  y setea el estado con  una objeto task\n  */ clearCache () {\n        if (this.getEnabledTasks().length == 0) {\n            console.log(\"se borraron las tasks eliminadas\");\n            localStorage.clear();\n            this.setState({\n                tasks: [\n                    {\n                        id: \"null\",\n                        text: \"Soy necesario para que el programa no se rompa :D\",\n                        checked: false,\n                        deleted: true\n                    }\n                ]\n            });\n        // console.log(this.data);\n        }\n    }\n};\n\n\nfunction $1610de69c571aaa7$export$a5e6865481338347(rootEl) {\n    //Crea un div\n    const homePageEl = document.createElement(\"div\");\n    //Le agrega contenido al div\n    /*\n  -Todo el contenido dentro una section \n  -div con h1: Mis pendientes\n  -Form:\n  Con un div contenedor para la leyenda del input y el input\n  -Un button\n  -Fin del form\n  -Fin de la section\n  -Inicio de otra section que contendra a las cards\n  \n  */ homePageEl.innerHTML = `\n  <section class=\"content-section\">\n        <div class=\"title-container\">\n          <h1 class=\"title\">Lista de pendientes</h1>\n        </div>\n        <form class=\"form\">\n          <div class=\"form__input-container\">\n            <legend class=\"form__legend\">Agregar tarea</legend>\n            <input name=\"task-text\" type=\"text\" class=\"form__input\" />\n          </div>\n          <button class=\"form__button\">Agregar</button>\n        </form>\n      </section>\n    <section class=\"cards-section\"></section>\n    `;\n    //Selecciona el sector donde iran las cartas y lo guarda en una constante\n    const cardsSection = homePageEl.querySelector(\".cards-section\");\n    //FUNCION QUE RENDERIZARA LAS TAREAS, recibe como parametro las tasks\n    function renderTasks(tasks) {\n        //Escribe sobre la section de cartas\n        //recorro con un for las tasks\n        //Crea un div y le asigna estilos\n        //crea un todo-card\n        //Le agrega los atributos\n        cardsSection[\"innerHTML\"] = \"\";\n        for (const cardItem of tasks){\n            const cardContainer = document.createElement(\"div\");\n            cardContainer.style.maxWidth = \"316px\";\n            cardContainer.style.minWidth = \"290px\";\n            cardContainer.style.width = \"100%\";\n            cardContainer.style.flexGrow = \"1\";\n            const card = document.createElement(\"todo-card\");\n            card.textContent = cardItem.text;\n            card.setAttribute(\"checked\", `${cardItem.checked}`);\n            card.setAttribute(\"id\", cardItem.id);\n            card.addEventListener(\"change\", (e)=>{\n                (0, $0b89d474933103bc$export$ca000e230c0caa3e).changeItemState(e.detail.id, JSON.parse(e.detail.value), \"check\");\n            });\n            card.addEventListener(\"delete\", (e)=>{\n                (0, $0b89d474933103bc$export$ca000e230c0caa3e).changeItemState(e.detail.id, e.detail.value, \"delete\");\n            });\n            cardContainer.appendChild(card);\n            cardsSection.appendChild(cardContainer);\n        }\n    }\n    //la funcion de renderizado de cards se ejecuta al subscribirse,\n    //Pasandole como parametros las tareas disponibles mediante getEnableTasks\n    (0, $0b89d474933103bc$export$ca000e230c0caa3e).subscribe(()=>{\n        renderTasks((0, $0b89d474933103bc$export$ca000e230c0caa3e).getEnabledTasks());\n    });\n    //adjunta al root la homePageEl\n    rootEl.appendChild(homePageEl);\n    //Cuando escucha el evento submit del form agrega las tareas\n    document.querySelector(\".form\")?.addEventListener(\"submit\", (e)=>{\n        e.preventDefault();\n        (0, $0b89d474933103bc$export$ca000e230c0caa3e).addTask(crypto.randomUUID(), e.target[\"task-text\"].value);\n        const form = document.querySelector(\".form\");\n        form.reset();\n    });\n}\n\n\n//La card que aparece cuando se agrega una tarea\nfunction $540285e0623e57f5$export$804a79ffbcb9f4d4() {\n    customElements.define(\"todo-card\", class CardComp extends HTMLElement {\n        //Constructor que llama a super y crea el shadow\n        constructor(){\n            super();\n            this.checked = false;\n            this.shadow = this.attachShadow({\n                mode: \"open\"\n            });\n        }\n        /*   //ConnectedCallback se ejecuta al iniciar el componente.: \n      Setea las propiedades text, checked y id\n         -Asigna a la propiedad text el valor de this.textContent \n         o avisa que no le pasaron texto.\n         -Asigna a la propiedad checked el valor del atributo checked, \n         true si lo tiene, false si no lo tiene.\n         -Asigna a la propiedad id lo que se le pasa por atributo.\n         -Ejecuta render()\n      */ connectedCallback() {\n            this.text = this.textContent || \"No me pasaron texto\";\n            this.checked = JSON.parse(this.getAttribute(\"checked\")) ? true : false;\n            this.id = this.getAttribute(\"id\");\n            this.render();\n        }\n        //\n        render() {\n            //Crea una hoja de estilos\n            const style = document.createElement(\"style\");\n            //Le agrega contenido a la hoja de estilos\n            style.innerText = `\n        @import url('https://fonts.googleapis.com/css2?family=Inconsolata:wght@300&display=swap');\n        *{\n          box-sizing: border-box;\n        }\n        .card {\n          padding: 22px 16px 12px 13px;\n          width: 100%;\n          border-radius: 4px;\n          background: #fff599;\n          display: flex;\n          flex-wrap: wrap;\n          justify-content: space-between;\n        }\n        .card-text {\n          margin: 0;\n          /*max-width: 250px;*/\n          max-width: 86%;\n          font-family: 'Inconsolata', monospace;\n          font-size: 18px;\n          font-style: normal;\n          font-weight: 400;\n          line-height: normal;\n        }\n        .line-through {\n          text-decoration: line-through;\n        }\n        .buttons-container {\n          display: flex;\n          flex-direction: column;\n          justify-content: space-between;\n          align-items: center;\n        }\n        .check-button {\n          appearance: none;\n          background-color: #fff;\n          width: 20px;\n          height: 20px;\n          border: 2px solid rgb(93, 147, 13) ;\n          background-color: #fff;\n      \n        }\n        .check-button:checked {\n          background-color: rgb(93, 147, 13);\n        }\n        .delete-button-container{\n          margin-top: 12px;\n          height: 21px;\n          width: 21px;\n        }\n        .delete-button {\n          display: none;\n          padding: 0;\n          border: none;\n          background-color: inherit;\n        }\n        .show{\n          display: block;\n        }\n        .delete-button:hover,\n        .check-button:hover {\n          scale: 1.2;\n        }\n        .delete-button__img {\n          height: 21px;\n          width: 21px;\n          margin: 0;\n        }\n        \n        .warning-container{\n          display: none;\n          position: fixed;\n          top: 0;\n          bottom: 0;\n          left: 0;\n          right: 0;\n          background-color: black;\n          align-items: center;\n          justify-content: center;\n        }\n        .warning {\n          background-color: black;\n          border-radius: 4px;\n          display: flex;\n          flex-direction: column;\n          align-items: center;\n          padding: 22px 16px 22px 16px;\n          width: 290px;\n          height: 106px;\n        }\n        .warning__title {\n          margin: 0;\n          font-family: 'Inconsolata', monospace;\n          font-size: 22px;\n          font-style: normal;\n          font-weight: 500;\n          line-height: normal;\n        }\n        .warning__buttons-container {\n          margin-top: 12px;\n          width: 100%;\n          display: flex;\n          justify-content: space-around;\n        }\n        .cancel-btn,\n        .confirm-btn {\n          font-family: 'Inconsolata', monospace;\n          font-size: 18px;\n          font-style: normal;\n          font-weight: 400;\n          line-height: normal;\n          width: 90px;\n          background-color: rgb(93, 147, 13);\n          border: none;\n          border-radius: 4px;\n        }\n        .cancel-btn:hover, \n        .confirm-btn:hover {\n          scale: 1.1;\n        }\n        `;\n            /*\n        -Guarda en la constante deleteIMG al elemento de id delete\n        -Crea un div y lo guarda en la constante card\n        -Le agreda la clase card \n        -Le agrega contenido:\n        p: clase card-text recibe this.text\n        div class button-container que aloja a uun input checkbox de clase check-button y a otro div de clase delete button.\n        El input asigna como atributo this.checked, si no tiene pasa un string vacio\n        -div de clase delete-button-container que aloja un button de clase delete-button\n        en vez de texto tiene una imagen.\n        -        \n        */ const deleteIMG = document.querySelector(\"#delete\");\n            const card = document.createElement(\"div\");\n            card.classList.add(\"card\");\n            card.innerHTML = `\n          <p class=\"card-text\">${this.text}</p>\n\n          <div class=\"buttons-container\">\n            <input type=\"checkbox\" class=\"check-button\" ${this.checked ? \"checked\" : \"\"}/>\n            <div class=\"delete-button-container\">\n              <button class=\"delete-button\">\n                <img src=${deleteIMG?.getAttribute(\"src\")} />\n              </button>\n            </div>\n          </div>\n\n        <div class=\"warning-container\">  \n          <div class=\"warning\">\n            <h3 class=\"warning__title\">¿Deseas borrar esta nota?</h3>\n            <div class=\"warning__buttons-container\">\n              <button class=\"cancel-btn\">Cancelar</button>\n              <button class=\"confirm-btn\">Borrar</button>\n            </div>\n          </div>\n        </div>  \n        `;\n            //esto deberia funcionar siempre y cuando el state recarge el contenido,\n            // ya que no hay ningun listener que le avise que tiene que cambiar de estilos\n            if (this.checked) card.querySelector(\".card-text\")?.classList.add(\"line-through\");\n            this.shadow.appendChild(card);\n            this.shadow.appendChild(style);\n            this.buttons();\n        }\n        //FUNCION BUTTONS\n        /*\n      -Seleciona los diferentes elementos creados en el shadow\n      -\n      \n      \n      */ buttons() {\n            const card = this.shadow.querySelector(\".card\"); //contenedor principal\n            const checkButton = this.shadow.querySelector(\".check-button\"); //checkbox\n            const deleteButton = this.shadow.querySelector(\".delete-button\"); //boton de borrado\n            const warning = this.shadow.querySelector(\".warning-container\"); //contenedor del warning\n            const warningButtonCancel = this.shadow.querySelector(\".cancel-btn\"); //cancela\n            const warningButtonConfirm = this.shadow.querySelector(\".confirm-btn\"); //confirma\n            //Cuando se carga la pagina no se muestra la carta\n            window.addEventListener(\"click\", ()=>{\n                card.style.border = \"none\";\n                deleteButton.style.display = \"none\";\n            });\n            //Cuando hacemos click en la card se agrega un borde y muestra la opcion de borrarla\n            card.addEventListener(\"click\", ()=>{\n                setTimeout(()=>{\n                    card.style.border = \"3px solid\";\n                    deleteButton.style.display = \"block\";\n                }, 1);\n            });\n            //custom event-\n            checkButton.addEventListener(\"click\", (e)=>{\n                const event = new CustomEvent(\"change\", {\n                    detail: {\n                        id: this.id,\n                        value: e.target.checked\n                    }\n                });\n                this.dispatchEvent(event);\n            });\n            //\n            deleteButton.addEventListener(\"click\", ()=>{\n                warning.style.display = \"flex\";\n            });\n            //Cuando cancela\n            warningButtonCancel.addEventListener(\"click\", ()=>{\n                warning.style.display = \"none\";\n            });\n            //Cuando confirma\n            warningButtonConfirm.addEventListener(\"click\", ()=>{\n                warning.style.display = \"none\";\n                console.log(\"se borro: \" + this.shadow.querySelector(\".card-text\").textContent);\n                const event = new CustomEvent(\"delete\", {\n                    detail: {\n                        id: this.id,\n                        value: true\n                    }\n                });\n                this.dispatchEvent(event);\n            });\n        }\n    });\n}\n\n\n\n(function() {\n    (0, $540285e0623e57f5$export$804a79ffbcb9f4d4)();\n    (0, $1610de69c571aaa7$export$a5e6865481338347)(document.querySelector(\".root\"));\n    (0, $0b89d474933103bc$export$ca000e230c0caa3e).init();\n    (0, $0b89d474933103bc$export$ca000e230c0caa3e).clearCache();\n})();\n\n\n//# sourceMappingURL=index.26d83e1f.js.map\n","import { initHomePage } from \"./pages/home\";\nimport { initCardComponent } from \"./components/card\";\nimport { state } from \"./state\";\n\n(function () {\n  initCardComponent();\n  initHomePage(document.querySelector(\".root\")!);\n  state.init();\n  state.clearCache();\n})();\n","import { state } from \"../../state\";\n//La funcion initHomePage se exporta y recibe como parametro un elemento HTML\nexport function initHomePage(rootEl: HTMLElement) {\n  //Crea un div\n  const homePageEl = document.createElement(\"div\");\n  //Le agrega contenido al div\n  /*\n  -Todo el contenido dentro una section \n  -div con h1: Mis pendientes\n  -Form:\n  Con un div contenedor para la leyenda del input y el input\n  -Un button\n  -Fin del form\n  -Fin de la section\n  -Inicio de otra section que contendra a las cards\n  \n  */\n  homePageEl.innerHTML = `\n  <section class=\"content-section\">\n        <div class=\"title-container\">\n          <h1 class=\"title\">Lista de pendientes</h1>\n        </div>\n        <form class=\"form\">\n          <div class=\"form__input-container\">\n            <legend class=\"form__legend\">Agregar tarea</legend>\n            <input name=\"task-text\" type=\"text\" class=\"form__input\" />\n          </div>\n          <button class=\"form__button\">Agregar</button>\n        </form>\n      </section>\n    <section class=\"cards-section\"></section>\n    `;\n\n  //Selecciona el sector donde iran las cartas y lo guarda en una constante\n\n  const cardsSection = homePageEl.querySelector(\".cards-section\");\n\n  //FUNCION QUE RENDERIZARA LAS TAREAS, recibe como parametro las tasks\n  function renderTasks(tasks) {\n    //Escribe sobre la section de cartas\n    //recorro con un for las tasks\n    //Crea un div y le asigna estilos\n    //crea un todo-card\n    //Le agrega los atributos\n\n    cardsSection![\"innerHTML\"] = \"\";\n    for (const cardItem of tasks) {\n      const cardContainer = document.createElement(\"div\");\n      cardContainer.style.maxWidth = \"316px\";\n      cardContainer.style.minWidth = \"290px\";\n      cardContainer.style.width = \"100%\";\n      cardContainer.style.flexGrow = \"1\";\n      const card = document.createElement(\"todo-card\");\n      card.textContent = cardItem.text;\n      card.setAttribute(\"checked\", `${cardItem.checked}`);\n      card.setAttribute(\"id\", cardItem.id);\n      card.addEventListener(\"change\", (e: any) => {\n        state.changeItemState(e.detail.id, JSON.parse(e.detail.value), \"check\");\n      });\n      card.addEventListener(\"delete\", (e: any) => {\n        state.changeItemState(e.detail.id, e.detail.value, \"delete\");\n      });\n\n      cardContainer.appendChild(card);\n      cardsSection!.appendChild(cardContainer);\n    }\n  }\n  //la funcion de renderizado de cards se ejecuta al subscribirse,\n  //Pasandole como parametros las tareas disponibles mediante getEnableTasks\n  state.subscribe(() => {\n    renderTasks(state.getEnabledTasks());\n  });\n  //adjunta al root la homePageEl\n  rootEl.appendChild(homePageEl);\n  //Cuando escucha el evento submit del form agrega las tareas\n  document.querySelector(\".form\")?.addEventListener(\"submit\", (e) => {\n    e.preventDefault();\n    state.addTask(crypto.randomUUID(), e.target![\"task-text\"].value);\n    const form = document.querySelector(\".form\") as any;\n    form.reset();\n  });\n}\n","const state = {\n  data: {\n    tasks: [{ id: \"123\", text: \"asdf\", checked: false }],\n  },\n  listeners: [],\n  //METODOS //\n  //INIT:\n  /*\n  FUNCION DE ESTE METODO: INICIALIZAR EL ESTADO TOMANDO LA DATA DEL LOCALSTORAGE\n  -Muestra en consola que inicia estado\n  -Guarda en la constante localData  \n  lo que devuelve El método getItem() de la interfaz Storage :\n  devuelve el valor de la clave cuyo nombre se le pasa por parámetro.\n  -Ejecuta setState()pasandole localData parseado\n  JSON.parse() retorna el objeto que se corresponde con el texto JSON entregado.\n  */\n  init() {\n    console.log(\"State Init\");\n    const localData = localStorage.getItem(\"save-state\");\n    this.setState(JSON.parse(localData!));\n  },\n  //GETSTATE: Retorna lo que se encuentra en data\n  getState() {\n    return this.data;\n  },\n  //GETENABLEDTASKS\n  /*FUNCION DEL METODO: DEVOLVER LAS TASKS QUE NO ESTAN CON DELETED\n  -Guarda en la constante lastState lo que devuelve getState()\n  -Entra en un condional:\n  si lastState tiene tasks, sobre las mismas aplica el metodo filter\n  y devuelve un nuevo array que contiene las tasks que no contenian deleted.\n  Si no tiene tasks devuelve un array vacio\n  \n  */\n  getEnabledTasks() {\n    const lastState = this.getState();\n    if (lastState && lastState.tasks) {\n      return lastState.tasks.filter((t) => !t.deleted);\n    } else {\n      return [];\n    }\n  },\n  //ADDTASK\n  /**\n   /FUNCION DEL METODO: AGREGAR TAREAS. \n   -Recibe por parametro un Id y un text\n    \n    -Pushea a las tasks del lastStage id, text y el checked en false\n   \n   */\n  addTask(id: string, text: string) {\n    const lastState = this.getState();\n    lastState.tasks.push({ id, text, checked: false });\n    this.setState(lastState);\n  },\n  //CHANGEITEMSTATE\n  /*\n  /FUNCION DEL METODO: CAMBIA EL ESTADO DE LOS ITEMS EN EL STATE\n  -Recibe por parametro un id, un booleano como newValue y una property que puede ser \"check\" o \"delete\"\n  -Guarda en la constante lastState lo que devuelve getState()\n  -Usa un find para recorrer las tasks, cuando se encuentra con una que coincide con el id que se le pasa, \n  la guarda en itemTochange (item a cambiar)\n  -Entra en un condicional: \n  Si incluye la propiedad check se le asigna como valor el newvalue boleano pasado por parametro\n  -Se actualiza estado con setState()pasandole como parametro el lastStage actualizado\n  */\n  changeItemState(id: string, newValue: boolean, property: \"check\" | \"delete\") {\n    const lastState = this.getState();\n    const itemToChange = lastState.tasks.find((t) => t.id == id);\n    if (property == \"check\") {\n      itemToChange.checked = newValue;\n    }\n    if (property == \"delete\") {\n      itemToChange.deleted = newValue;\n    }\n    this.setState(lastState);\n  },\n  //SETSTATE: Recibe nuevo estado,\n  /*\n  FUNCION DEL METODO: ACTUALIZA EL ESTADO Y LO GUARDA EN EL LOCALSTORAGE\n  -Recibe por parametro el nuevo estado\n  -Lo guarda en data\n  -Recorre y ejecuta los listeners\npara que los componentes subscritos se enteren de los cambios del estado.\n-El método setItem() de la interfaz Storage, \ncuando reciba una clave y un valor, añadirá estos al almacén, \no actualizará el valor si la clave ya existe. Pasa como parametro a este metodo\nel nuevo estado\n  //*/\n\n  setState(newState) {\n    this.data = newState;\n\n    for (const cb of this.listeners) {\n      cb();\n    }\n    localStorage.setItem(\"save-state\", JSON.stringify(newState));\n  },\n  //SUBSCRIBE: Recibe una funcion y la pushea a los listeners.\n  //Cuando se realize un setState()(metodo que recorre y ejecuta los listeners)\n  //los componentes subscritos se enteraran de los cambios del estado\n  subscribe(callback: (any) => void) {\n    this.listeners.push(callback);\n  },\n  //CLEARCACHE\n  /*\n  FUNCION DEL METODO: LIMPIAR EL LOCALSTORAGE CUANDO YA NO HAY MAS TAREAS\n  -Entra en un condicional:\n  Si el resultado de ejecutar getEnabledtask devuelve un array de length 0 (es decir esta vacio)\n  avisa por consola que las tareas estan eliminadas\n  limpia el localStorage\n  y setea el estado con  una objeto task\n  */\n  clearCache() {\n    if (this.getEnabledTasks().length == 0) {\n      console.log(\"se borraron las tasks eliminadas\");\n      localStorage.clear();\n      this.setState({\n        tasks: [\n          {\n            id: \"null\",\n            text: \"Soy necesario para que el programa no se rompa :D\",\n            checked: false,\n            deleted: true,\n          },\n        ],\n      });\n      // console.log(this.data);\n    }\n  },\n};\n//Exporta el estado para poder ser utilizado en otras partes\nexport { state };\n","//La card que aparece cuando se agrega una tarea\n\nexport function initCardComponent() {\n  customElements.define(\n    \"todo-card\",\n    class CardComp extends HTMLElement {\n      //Propiedades de la clase\n      shadow;\n      text: string;\n      checked: boolean = false;\n      id: string;\n      //Constructor que llama a super y crea el shadow\n      constructor() {\n        super();\n        this.shadow = this.attachShadow({ mode: \"open\" });\n      }\n\n      /*   //ConnectedCallback se ejecuta al iniciar el componente.: \n      Setea las propiedades text, checked y id\n         -Asigna a la propiedad text el valor de this.textContent \n         o avisa que no le pasaron texto.\n         -Asigna a la propiedad checked el valor del atributo checked, \n         true si lo tiene, false si no lo tiene.\n         -Asigna a la propiedad id lo que se le pasa por atributo.\n         -Ejecuta render()\n      */\n\n      connectedCallback() {\n        this.text = this.textContent || \"No me pasaron texto\";\n        this.checked = JSON.parse(this.getAttribute(\"checked\")!) ? true : false;\n        this.id = this.getAttribute(\"id\")!;\n\n        this.render();\n      }\n      //\n      render() {\n        //Crea una hoja de estilos\n        const style = document.createElement(\"style\");\n        //Le agrega contenido a la hoja de estilos\n        style.innerText = `\n        @import url('https://fonts.googleapis.com/css2?family=Inconsolata:wght@300&display=swap');\n        *{\n          box-sizing: border-box;\n        }\n        .card {\n          padding: 22px 16px 12px 13px;\n          width: 100%;\n          border-radius: 4px;\n          background: #fff599;\n          display: flex;\n          flex-wrap: wrap;\n          justify-content: space-between;\n        }\n        .card-text {\n          margin: 0;\n          /*max-width: 250px;*/\n          max-width: 86%;\n          font-family: 'Inconsolata', monospace;\n          font-size: 18px;\n          font-style: normal;\n          font-weight: 400;\n          line-height: normal;\n        }\n        .line-through {\n          text-decoration: line-through;\n        }\n        .buttons-container {\n          display: flex;\n          flex-direction: column;\n          justify-content: space-between;\n          align-items: center;\n        }\n        .check-button {\n          appearance: none;\n          background-color: #fff;\n          width: 20px;\n          height: 20px;\n          border: 2px solid rgb(93, 147, 13) ;\n          background-color: #fff;\n      \n        }\n        .check-button:checked {\n          background-color: rgb(93, 147, 13);\n        }\n        .delete-button-container{\n          margin-top: 12px;\n          height: 21px;\n          width: 21px;\n        }\n        .delete-button {\n          display: none;\n          padding: 0;\n          border: none;\n          background-color: inherit;\n        }\n        .show{\n          display: block;\n        }\n        .delete-button:hover,\n        .check-button:hover {\n          scale: 1.2;\n        }\n        .delete-button__img {\n          height: 21px;\n          width: 21px;\n          margin: 0;\n        }\n        \n        .warning-container{\n          display: none;\n          position: fixed;\n          top: 0;\n          bottom: 0;\n          left: 0;\n          right: 0;\n          background-color: black;\n          align-items: center;\n          justify-content: center;\n        }\n        .warning {\n          background-color: black;\n          border-radius: 4px;\n          display: flex;\n          flex-direction: column;\n          align-items: center;\n          padding: 22px 16px 22px 16px;\n          width: 290px;\n          height: 106px;\n        }\n        .warning__title {\n          margin: 0;\n          font-family: 'Inconsolata', monospace;\n          font-size: 22px;\n          font-style: normal;\n          font-weight: 500;\n          line-height: normal;\n        }\n        .warning__buttons-container {\n          margin-top: 12px;\n          width: 100%;\n          display: flex;\n          justify-content: space-around;\n        }\n        .cancel-btn,\n        .confirm-btn {\n          font-family: 'Inconsolata', monospace;\n          font-size: 18px;\n          font-style: normal;\n          font-weight: 400;\n          line-height: normal;\n          width: 90px;\n          background-color: rgb(93, 147, 13);\n          border: none;\n          border-radius: 4px;\n        }\n        .cancel-btn:hover, \n        .confirm-btn:hover {\n          scale: 1.1;\n        }\n        `;\n        /*\n        -Guarda en la constante deleteIMG al elemento de id delete\n        -Crea un div y lo guarda en la constante card\n        -Le agreda la clase card \n        -Le agrega contenido:\n        p: clase card-text recibe this.text\n        div class button-container que aloja a uun input checkbox de clase check-button y a otro div de clase delete button.\n        El input asigna como atributo this.checked, si no tiene pasa un string vacio\n        -div de clase delete-button-container que aloja un button de clase delete-button\n        en vez de texto tiene una imagen.\n        -        \n        */\n        const deleteIMG = document.querySelector(\"#delete\");\n        const card = document.createElement(\"div\");\n        card.classList.add(\"card\");\n        card.innerHTML = `\n          <p class=\"card-text\">${this.text}</p>\n\n          <div class=\"buttons-container\">\n            <input type=\"checkbox\" class=\"check-button\" ${\n              this.checked ? \"checked\" : \"\"\n            }/>\n            <div class=\"delete-button-container\">\n              <button class=\"delete-button\">\n                <img src=${deleteIMG?.getAttribute(\"src\")} />\n              </button>\n            </div>\n          </div>\n\n        <div class=\"warning-container\">  \n          <div class=\"warning\">\n            <h3 class=\"warning__title\">¿Deseas borrar esta nota?</h3>\n            <div class=\"warning__buttons-container\">\n              <button class=\"cancel-btn\">Cancelar</button>\n              <button class=\"confirm-btn\">Borrar</button>\n            </div>\n          </div>\n        </div>  \n        `;\n\n        //esto deberia funcionar siempre y cuando el state recarge el contenido,\n        // ya que no hay ningun listener que le avise que tiene que cambiar de estilos\n        if (this.checked) {\n          card.querySelector(\".card-text\")?.classList.add(\"line-through\");\n        }\n\n        this.shadow.appendChild(card);\n        this.shadow.appendChild(style);\n        this.buttons();\n      }\n      //FUNCION BUTTONS\n      /*\n      -Seleciona los diferentes elementos creados en el shadow\n      -\n      \n      \n      */\n      buttons() {\n        const card = this.shadow.querySelector(\".card\"); //contenedor principal\n        const checkButton = this.shadow.querySelector(\".check-button\"); //checkbox\n        const deleteButton = this.shadow.querySelector(\".delete-button\"); //boton de borrado\n        const warning = this.shadow.querySelector(\".warning-container\"); //contenedor del warning\n        const warningButtonCancel = this.shadow.querySelector(\".cancel-btn\"); //cancela\n        const warningButtonConfirm = this.shadow.querySelector(\".confirm-btn\"); //confirma\n        //Cuando se carga la pagina no se muestra la carta\n        window.addEventListener(\"click\", () => {\n          card.style.border = \"none\";\n          deleteButton.style.display = \"none\";\n        });\n\n        //Cuando hacemos click en la card se agrega un borde y muestra la opcion de borrarla\n        card.addEventListener(\"click\", () => {\n          setTimeout(() => {\n            card.style.border = \"3px solid\";\n            deleteButton.style.display = \"block\";\n          }, 1);\n        });\n        //custom event-\n        checkButton.addEventListener(\"click\", (e) => {\n          const event = new CustomEvent(\"change\", {\n            detail: {\n              id: this.id,\n              value: e.target.checked,\n            },\n          });\n          this.dispatchEvent(event);\n        });\n        //\n        deleteButton.addEventListener(\"click\", () => {\n          warning.style.display = \"flex\";\n        });\n        //Cuando cancela\n        warningButtonCancel.addEventListener(\"click\", () => {\n          warning.style.display = \"none\";\n        });\n        //Cuando confirma\n        warningButtonConfirm.addEventListener(\"click\", () => {\n          warning.style.display = \"none\";\n          console.log(\n            \"se borro: \" + this.shadow.querySelector(\".card-text\").textContent\n          );\n          const event = new CustomEvent(\"delete\", {\n            detail: {\n              id: this.id,\n              value: true,\n            },\n          });\n          this.dispatchEvent(event);\n        });\n      }\n    }\n  );\n}\n"],"names":["$0b89d474933103bc$export$ca000e230c0caa3e","data","tasks","id","text","checked","listeners","init","console","log","localData","localStorage","getItem","setState","JSON","parse","getState","getEnabledTasks","lastState","filter","t","deleted","addTask","push","changeItemState","newValue","property","itemToChange","find","newState","cb","setItem","stringify","subscribe","callback","clearCache","length","clear","customElements","define","HTMLElement","constructor","shadow","attachShadow","mode","connectedCallback","textContent","getAttribute","render","style","document","createElement","innerText","deleteIMG","querySelector","card","classList","add","innerHTML","appendChild","buttons","checkButton","deleteButton","warning","warningButtonCancel","warningButtonConfirm","window","addEventListener","border","display","setTimeout","e","event","CustomEvent","detail","value","target","dispatchEvent","rootEl","homePageEl","cardsSection","renderTasks","cardItem","cardContainer","maxWidth","minWidth","width","flexGrow","setAttribute","preventDefault","crypto","randomUUID","form","reset"],"version":3,"file":"index.26d83e1f.js.map"}